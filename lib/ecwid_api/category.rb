module EcwidApi
  # In Ecwid, a Category contains products and sub categories which allow
  # shoppers to browse the Products in the Store. Categories are organized
  # in a tree and helper methods are provided to aid in traversal.
  #
  # @see http://api.ecwid.com/#categories
  #
  class Category < Entity
    self.url_root = "categories"

    #####
    # @!group Readonly Attributes 
    #####

    # @!attribute [r] id
    #   @return [Integer] the Category id
    ecwid_reader :id

    # @!attribute [r] thumbnail_url
    #   The URL for the thumbnail image.
    # 
    #   Use {#upload_image!} to upload the full-size image. The thumbnail
    #   will be generated by Ecwid.
    #
    #   @return [String] the URL for the thumbnail image
    ecwid_reader :thumbnailUrl

    # @!attribute [r] original_image_url
    #   The URL for the full-size image
    #
    #   Use {#upload_image!} to upload the image
    #
    #   @return [String] 
    ecwid_reader :originalImageUrl

    # @!attribute [r] url
    #   @return [String] the URL for the Category
    ecwid_reader :url

    # @!attribute [r] product_count
    #   @return [Integer] the number of Products contained in the Cateogory
    ecwid_reader :productCount

    #####
    # @!endgroup
    #####

    #####
    # @!group Read/Write Attributes
    #####

    # @!attribute [rw] parent_id
    #   @return [Integer] the id of the parent Category
    ecwid_accessor :parentId

    # @!attribute [rw] order_by
    #   @return [Integer] the sequence of the Category
    ecwid_accessor :orderBy

    # @!attribute [rw] name
    #   @return [String] the name of the Category
    ecwid_accessor :name

    # @!attribute [rw] description
    #   @return [String] the Category description
     #  dug
    ecwid_accessor :description

    # @!attribute [rw] enabled
    #   @return [Boolean] whether the Category is enabled, or disabled
    ecwid_accessor :enabled

    # @!attribute [rw] product_ids
    #   @return [Array<Integer>, nil] the Product IDs that are contained in the 
    #     Category. nil is returned if the Category doesn't contain any Products.
    ecwid_accessor :productIds

    #####
    # @!endgroup
    #####

    # Returns the immediate subcategories that belong to the Category
    #
    # @param params [Hash] optional request parameters 
    #
    # @see Api::Categories#all
    #
    # @return [Array<Category>] the Categories that belong to this Category
    #
    def sub_categories(params = {})
      @sub_categories ||= client.categories.all(params.merge(parent: id))
    end

    # Returns an flat Array of _all_ of the sub categories (deep) that belong
    # to the Category.
    #
    # @param params [Hash] optional request parameters
    #
    # @see Api::Categories#all
    # 
    # @return [Array<Category>] all of the subcategories for the category
    #
    def all_sub_categories(params = {})
      @all_sub_categories ||= sub_categories(params) + sub_categories.flat_map do |sub|
        sub.all_sub_categories(params)
      end
    end

    # Returns the parent Category, or nil if there isn't one
    #
    # @return [Category, nil] the parent category, or nil if the Category is
    #   root level
    #
    def parent
      @parent ||= begin
        parent_id = data["parentId"]
        client.categories.find(parent_id) if parent_id
      end
    end

    # Returns all of the parent categories (ancestors)
    #
    # @return [Array<Category>] all of the ancestors of the Category
    #
    def parents
      if parent
        parent.parents + [parent]
      else
        []
      end
    end

    # Returns an Array of the Products that belong to the Category
    #
    # @param params [Hash] optional request parameters
    #
    # @return [Array<Product>] the Products that belong to the Category
    #
    def products(params = {})
      @products ||= product_ids.map do |product_id|
        client.products.find(product_id)
      end
    end

    # The product_ids that are contained in the Category
    #
    # @return [Array] An empty Array will be returned if the Category doesn't
    #   contain any Products.
    #
    def product_ids
      super || []
    end

    # Uploads an image for the Category
    #
    # @note The image is uploaded immediately, not when {#save} is called.
    #
    # @param filename [String] the path to a local file or a URL
    #
    # @return [Faraday::Response]
    #
    def upload_image!(filename)
      client.post_image("categories/#{id}/image", filename)
    end
  end
end